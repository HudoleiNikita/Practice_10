1
def fib(n):
  if n==0:
    return 0
  if n==1 or n==2:
    return 1
  else:
    return fib(n-1)+fib(n-2)
print(fib(0))
print(fib(2))
print(fib(4))
3.
def fib_memoization(n):
  memory = {}
  if n in memory:
    return memory[n]
  if n==0:
    return 0
  if n == 1 or n==2:
    return 1
  else:           
    number =  fib_memoization(n-1) + fib_memoization(n-2)
    memory[n] = number
  return number
fib_memoization(35)
4.
Сложность алгоритма с использованием мемоизации станет О(n). Вычисления не производятся заново, а просто берётся заранее подсчитанное число из памяти и используется.
5.
def fib_cycle(n):
  first = 1
  second = 1
  i = 0
  while i < n - 2:
    sum = first + second
    first = second
    second = sum
    i = i + 1
  print(second)
fib_cycle(6)
6.
def interpolation(arr,lo,hi,x):
  if lo<=hi and x>=arr[lo] and x<=arr[hi]:
    pos=lo+((hi-lo)//(arr[hi]-arr[lo])*(x-arr[lo]))
    if arr[pos]==x:
      return pos
    if arr[pos]<x:
      return interpolation(arr,pos+1,hi,x)
    if arr[pos]>x:
      return interpolation(arr,lo,pos-1,x)
  rerurn -1
interpolation([1,2,3,4,5,6],3,5,4)